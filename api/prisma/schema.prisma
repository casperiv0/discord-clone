// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  avatar        String?      @unique @default("https://cdn.discordapp.com/embed/avatars/0.png")
  username      String
  password      String
  createdAt     DateTime     @default(now())
  name          String
  tag           Int
  bio           String?
  status        StatusType   @default(ONLINE)
  statusMessage String?
  connections   Connection[]
  messages      Message[]
  guilds        Guild[]
  guild         Guild?       @relation("members", fields: [guildId], references: [id], onDelete: Cascade)
  guildId       String?
  invites       Invite[]
}

model Guild {
  id        String    @id @default(uuid())
  name      String
  icon      String?
  channels  Channel[]
  messages  Message[]
  members   User[]    @relation("members")
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  createdAt DateTime  @default(now())
  invites   Invite[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  userId    String
  channelId String
  guildId   String
  createdAt DateTime @default(now())
}

model Channel {
  id        String      @id @default(uuid())
  type      ChannelType
  name      String
  guild     Guild?      @relation(fields: [guildId], references: [id])
  guildId   String?
  messages  Message[]
  parent    Channel?    @relation("parentToChannel", fields: [channelId], references: [id])
  parentId  String?
  channel   Channel[]   @relation("parentToChannel")
  channelId String?
  createdAt DateTime    @default(now())
}

model Connection {
  id     String         @id @default(uuid())
  type   ConnectionType
  user   User?          @relation(fields: [userId], references: [id])
  userId String?
  url    String
  name   String
}

model Invite {
  id        String   @id @default(uuid())
  code      String   @unique
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  guildId   String
  createdAt DateTime @default(now())
  createdBy User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum ChannelType {
  GUILD_TEXT
  GUILD_CATEGORY

}

enum ConnectionType {
  GITHUB
  TWITTER
  WEBSITE
}

enum StatusType {
  ONLINE
  IDLE
  DND
  OFFLINE
}
